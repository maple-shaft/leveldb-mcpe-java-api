import org.gradle.internal.jvm.Jvm

plugins {
	id 'cpp-library'
}

group 'org.middlepath'
version '1.0-SNAPSHOT'

// Directory where LEVELDB is installed
def leveldbHome = System.getenv('LEVELDB_HOME')

//Directory for libleveldb.so build
def leveldbSharedLibraryDir = leveldbHome + '/out-shared'

//Hard coding to the linux environment... will make this build much more inclusive to other build environments.
//def leveldbSharedLibrary = leveldbSharedLibraryDir + '/libleveldb.so'
// Uncomment the line below for Cygwin because symlinks don't work by default.
def leveldbSharedLibrary = leveldbSharedLibraryDir + '/libleveldb.so.1.20'

// headers for leveldb
def leveldbInclude = leveldbHome + '/include'

/*model {
	toolChains {
		gcc(Gcc) {
			path "C:/cygwin64/bin"
		}
	}
}*/

library {
	binaries.configureEach { CppBinary binary ->
		def compileTask = binary.compileTask.get()
		
		def javaHomeCustom = "${Jvm.current().javaHome}"
		compileTask.includes.from(javaHomeCustom + "/include")
		
		compileTask.includes.from(leveldbInclude)

		def osFamily = binary.targetPlatform.targetMachine.operatingSystemFamily
		if (osFamily.macOs) {
			compileTask.includes.from("${Jvm.current().javaHome}/include/darwin")
		} else if (osFamily.linux) {
			compileTask.includes.from(javaHomeCustom + "/include/linux")
		} else if (osFamily.windows) {
			compileTask.includes.from(javaHomeCustom + "/include/win32")
		}

		compileTask.source.from fileTree(dir: "src/main/cpp", include: "**/*.cpp")

		def toolChain = binary.toolChain
		if (toolChain instanceof VisualCpp) {
			compileTask.compilerArgs.addAll(["/TC"])
		} else if (toolChain instanceof GccCompatibleToolChain) {
			compileTask.compilerArgs.addAll(["-std=c++11", "-DDLLX= ", "-g"])
		}
		
		// Configure the binaries to link
		def linkTask = binary.linkTask.get()
		linkTask.lib( leveldbSharedLibrary )
		linkTask.linkerArgs.addAll(['-L ' + leveldbSharedLibraryDir])
	}
}
