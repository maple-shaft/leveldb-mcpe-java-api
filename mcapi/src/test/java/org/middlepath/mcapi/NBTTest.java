package org.middlepath.mcapi;

import org.junit.Test;
import org.middlepath.mcapi.nbt.NBTParser;
import org.middlepath.mcapi.nbt.NBTTag;

import static org.junit.Assert.*;

import java.util.Arrays;

public class NBTTest {

	static byte[] testValue = new byte[] {
		0x0A, 0x00, 0x00, 0x08, 0x04, 0x00, 0x6E, 0x61, 0x6D, 0x65, 0x11, 0x00, 0x6D,
		0x69, 0x6E, 0x65, 0x63, 0x72, 0x61, 0x66, 0x74, 0x3A, 0x62, 0x65, 0x64, 0x72,
		0x6F, 0x63, 0x6B, 0x0A, 0x06, 0x00, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x01,
		0x0E, 0x00, 0x69, 0x6E, 0x66, 0x69, 0x6E, 0x69, 0x62, 0x75, 0x72, 0x6E, 0x5F,
		0x62, 0x69, 0x74, 0x00, 0x00, 0x03, 0x07, 0x00, 0x76, 0x65, 0x72, 0x73, 0x69,
		0x6F, 0x6E, 0x00, 0x00, 0x0F, 0x01, 0x00, 0x0A, 0x00, 0x00, 0x08, 0x04, 0x00,
		0x6E, 0x61, 0x6D, 0x65, 0x0E, 0x00, 0x6D, 0x69, 0x6E, 0x65, 0x63, 0x72, 0x61,
		0x66, 0x74, 0x3A, 0x64, 0x69, 0x72, 0x74, 0x0A, 0x06, 0x00, 0x73, 0x74, 0x61,
		0x74, 0x65, 0x73, 0x08, 0x09, 0x00, 0x64, 0x69, 0x72, 0x74, 0x5F, 0x74, 0x79,
		0x70, 0x65, 0x06, 0x00, 0x6E, 0x6F, 0x72, 0x6D, 0x61, 0x6C, 0x00, 0x03, 0x07,
		0x00, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x00, 0x00, 0x0F, 0x01, 0x00
	};
	
	@Test
	public void testNBTParser() throws Exception {
		NBTParser parser = new NBTParser(testValue, 0);
		assertTrue(parser.hasNext());
		NBTTag<?> tag = parser.next();
		assertNotNull(tag);
		System.out.println(tag);
		
		byte[] actualBytes = tag.write();
		byte[] expectedBytes = new byte[72];
		System.arraycopy(testValue,  0,  expectedBytes, 0,  72);
		for (int i = 0; i < 72; i++) {
			System.out.println(i);
			assertEquals(expectedBytes[i], actualBytes[i]);
		}
		assertTrue(Arrays.equals(expectedBytes, actualBytes));
	}
}
